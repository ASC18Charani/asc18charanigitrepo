import { Component } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { Course } from '../../model/data.model';
import { CourseService } from '../../service/course.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-add-courses',
  templateUrl: './add-courses.component.html',
  styleUrls: ['./add-courses.component.css']
})
export class AddCoursesComponent {
  courseForm: FormGroup;  // Define the form group

  constructor(private fb: FormBuilder, private courseService: CourseService, private router: Router) {
    // Initialize the form group with form controls
    this.courseForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(3)]], // Name is required, at least 3 characters
      description: ['', [Validators.required]],
      trainer: ['', [Validators.required]],  // Add validation for trainer
      price: ['', [Validators.required, Validators.min(0)]]
    });
  }

  // Method to handle course submission
  addCourse(): void {
    if (this.courseForm.valid) {
      const newCourse: Course = {
        name: this.courseForm.value.name.trim(),
        description: this.courseForm.value.description.trim(),
        trainer: this.courseForm.value.trainer.trim(),
        price: this.courseForm.value.price
      };

      // Call service to add the course
      this.courseService.createCourse(newCourse).subscribe({
        next: (createdCourse) => {
          console.log('Course created:', createdCourse);
          this.router.navigate(['/courses']);
          this.resetForm();  // Clear the form after submission
        },
        error: (err) => {
          console.error('Error creating course:', err);
        }
      });
    } else {
      console.log('Form is invalid');
    }
  }

  // Method to clear the form
  resetForm(): void {
    this.courseForm.reset();
  }
}



// import { Component } from '@angular/core';
// import { FormGroup, FormBuilder, Validators } from '@angular/forms';
// import { Router } from '@angular/router';
// import { CourseService } from '../../service/course.service';
// import { Course } from '../../model/data.model';
// // import { CourseService } from '../service/course.service';
// // import { Course } from '../model/data.model';

// @Component({
//   selector: 'app-add-courses',
//   templateUrl: './add-courses.component.html',
//   styleUrls: ['./add-courses.component.css']
// })
// export class AddCoursesComponent {
//   courseForm: FormGroup; // Define the form group

//   constructor(
//     private fb: FormBuilder, 
//     private courseService: CourseService, 
//     private router: Router
//   ) {
//     // Initialize the form group with form controls
//     this.courseForm = this.fb.group({
//       name: ['', [Validators.required, Validators.minLength(3)]], // Name is required, at least 3 characters
//       description: ['', [Validators.required]] // Description is required
//     });
//   }

//   // Method to handle form submission
//   addCourse(): void {
//     if (this.courseForm.valid) {
//       const newCourse: Course = {
//         id: '', // ID will be handled by the backend or autogenerated
//         name: this.courseForm.value.name.trim(),
//         description: this.courseForm.value.description.trim()
//       };

//       // Submit the course data via the service
//       this.courseService.createCourse(newCourse).subscribe({
//         next: () => {
//           console.log('Course created successfully');
//           this.router.navigate(['/courses']); // Navigate to the Courses page after submission
//         },
//         error: (err) => {
//           console.error('Error creating course:', err);
//         }
//       });
//     } else {
//       console.error('Form is invalid');
//     }
//   }

//   // Method to reset the form
//   resetForm(): void {
//     this.courseForm.reset(); // Reset the form fields
//   }
// }
