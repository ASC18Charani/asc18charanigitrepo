import { Component, OnInit } from '@angular/core';
import { Learner } from '../model/data.model';
import { LearnerService } from '../service/learner.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-learners',
  // standalone: true,
  // imports: [],
  templateUrl: './learners.component.html',
  styleUrls: ['./learners.component.css']
})
export class LearnersComponent implements OnInit{
  learners: Learner[] = [];
  displayedLearners: Learner[] = [];
  searchTerm: string = '';
  newLearner: Partial<Learner> = { name: '', email: '', course: '', trainer: '', paymentmethod: ''};

  constructor(private learnerService: LearnerService, private router: Router) {}

  ngOnInit() {
    this.loadLearners();
  }

  loadLearners() {
    this.learnerService.getLearners().subscribe({
      next: (data) => {
        this.learners = data;
        this.displayedLearners = data;
      },
      error: (err) => {
        console.error('Error fetching learners:', err);
      }
    });
  }

 FilteredLearners() {
    if (!this.searchTerm.trim()) {
      this.displayedLearners = [...this.learners];
    } else {
      this.displayedLearners = this.learners.filter(learner =>
        learner.id?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        learner.name.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    }
  }

  addLearner(): void {
    this.router.navigate(["/addlearner"]);
    if (this.newLearner.name?.trim()  && this.newLearner.email?.trim() && this.newLearner.course?.trim() && this.newLearner.trainer?.trim() && this.newLearner.paymentmethod?.trim()) {
      const learner: Learner = {
        id: '', // ID will be handled by the backend or autogenerated
        name: this.newLearner.name.trim(),
        email: this.newLearner.email.trim(),
        course: this.newLearner.course.trim(),
        trainer: this.newLearner.trainer.trim(),
        paymentmethod: this.newLearner.paymentmethod.trim(),

      };

      this.learnerService.createLearners(learner).subscribe({
        next: (createdLearner) => {
          console.log('learner created:', createdLearner);
          this.learners.push(createdLearner); // Add to the local course array
          this.FilteredLearners(); // Refresh the displayed courses
          this.newLearner = { name: '', course: '' }; // Reset the form
        },
        error: (err) => {
          console.error('Error creating learner:', err);
        }
      });
    } else {
      console.error('Invalid learner details');
    }
  }

  editLearner(learner: Learner) {
    console.log('Editing learner:', learner);
    this.router.navigate(['/updatelearner', learner.id]);
    // Implement edit logic
  }

  deleteLearner(id: string | undefined) {
    if (id) {
    this.learnerService.deleteLearner(id).subscribe({
      next: () => {
        this.learners = this.learners.filter(learner => learner.id !== id);
        this.FilteredLearners(); // Refresh displayed courses after deletion
      },
      error: (err) => {
        console.error('Error deleting learner:', err);
      }
    });
  }  else {
    console.error('Invalid course ID');
  }
}
}
