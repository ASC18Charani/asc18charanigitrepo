import { Component, OnInit } from '@angular/core';
import { Review } from '../model/data.model';
import { ReviewService } from '../service/review.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-reviews',
  // standalone: true,
  // imports: [],
  templateUrl: './reviews.component.html',
  styleUrls: ['./reviews.component.css']
})
export class ReviewsComponent implements OnInit {
  reviews: Review[] = [];
  displayedReviews: Review[] = [];
  searchTerm: string = '';
  newReview: Partial<Review> = { name: '', course: '', review: ''};

  constructor(private reviewService: ReviewService, private router: Router) { }

  ngOnInit() {
    this.loadReviews();
  }

  loadReviews() {
    this.reviewService.getReviews().subscribe({
      next: (data) => {
        this.reviews = data;
        this.displayedReviews = data;
      },
      error: (err) => {
        console.error('Error fetching reviews:', err);
      }
    });
  }

  FilteredReviews() {
    if (!this.searchTerm.trim()) {
      this.displayedReviews = [...this.reviews];
    } else {
      this.displayedReviews = this.reviews.filter(review =>
        review.id?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        review.course.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    }
  }

  addReview(): void {
    this.router.navigate(["/addreview"]);
    if (this.newReview.name?.trim() && this.newReview.course?.trim() && this.newReview.review?.trim()) {
      const review: Review = {
        id: '', // ID will be handled by the backend or autogenerated
        name: this.newReview.name.trim(),
        course: this.newReview.course.trim(),
        review: this.newReview.review.trim(),
        rating: this.newReview.rating || 0
      };

      this.reviewService.createReview(review).subscribe({
        next: (createdReview) => {
          console.log('review created:', createdReview);
          this.reviews.push(createdReview); // Add to the local course array
          this.FilteredReviews(); // Refresh the displayed courses
          this.newReview = { course: '', review: '' }; // Reset the form
        },
        error: (err) => {
          console.error('Error creating review:', err);
        }
      });
    } else {
      console.error('Invalid review details');
    }
  }

  editReview(review: Review) {
    console.log('Editing review:', review);
    this.router.navigate(['/updatereview', review.id]);
    // Implement edit logic
  }

  getStarRating(rating: number): string {
    return '★'.repeat(rating) + '☆'.repeat(5 - rating); 
  }

  deleteReview(id: string | undefined) {
    if (id) {
      this.reviewService.deleteReview(id).subscribe({
        next: () => {
          this.reviews = this.reviews.filter(review => review.id !== id);
          this.FilteredReviews(); // Refresh displayed courses after deletion
        },
        error: (err) => {
          console.error('Error deleting review:', err);
        }
      });
    } else {
      console.error('Invalid course ID');
    }
  }
}
