import { Component, OnInit } from '@angular/core';
import { Author } from '../model/data.model';
import { AuthorService } from '../service/author.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-authors',
  // standalone: true,
  // imports: [],
  templateUrl: './authors.component.html',
  styleUrls: ['./authors.component.css']
})
export class AuthorsComponent implements OnInit{
  authors: Author[] = [];
  displayedAuthors: Author[] = [];
  searchTerm: string = '';
  newAuthor: Partial<Author> = { name: '', course: '', description: ''};

  constructor(private authorService: AuthorService, private router: Router) {

  }

  ngOnInit() {
    this.loadAuthors();
  }

  loadAuthors() {
    this.authorService.getAuthor().subscribe({
      next: (data) => {
        this.authors = data;
        this.displayedAuthors = data;
      },
      error: (err) => {
        console.error('Error fetching authors:', err);
      }
    });
  }

  FilteredAuthors() {
    if(!this.searchTerm.trim()) {
      this.displayedAuthors = [...this.authors];
    }
    else {
      this.displayedAuthors = this.authors.filter(author =>
        author.id?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        author.name.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    }
  }

  addAuthor(): void {
    this.router.navigate(["/addauthor"]);
    if (this.newAuthor.name?.trim() && this.newAuthor.course?.trim() && this.newAuthor.description?.trim()) {
      const author: Author = {
        id: '', // ID will be handled by the backend or autogenerated
        name: this.newAuthor.name.trim(),
        course: this.newAuthor.course.trim(),
        description: this.newAuthor.description.trim(),
        rating: this.newAuthor.rating || 0
      };

      this.authorService.createAuthor(author).subscribe({
        next: (createdAuthor) => {
          console.log('Author created:', createdAuthor);
          this.authors.push(createdAuthor); // Add to the local course array
          this.FilteredAuthors(); // Refresh the displayed courses
          this.newAuthor = { name: '', description: '' }; // Reset the form
        },
        error: (err) => {
          console.error('Error creating author:', err);
        }
      });
    } else {
      console.error('Invalid author details');
    }
  }

  editAuthor(author: Author) {
    console.log('Editing author:', author);
    this.router.navigate(['/updateauthor', author.id]);
  }

  getStarRating(rating: number): string {
    return '★'.repeat(rating) + '☆'.repeat(5 - rating); 
  }

  deleteAuthor(id: string | undefined) {
    if (id) {
    this.authorService.deleteAuthor(id).subscribe({
      next: () => {
        this.authors = this.authors.filter(author => author.id !== id);
        this.FilteredAuthors();
      },
      error: (err) => {
        console.error('Error deleting author:', err);
      }
    });
  } else {
    console.error('Invalid course ID');
  }
}
}
