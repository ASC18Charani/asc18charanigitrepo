import { Component, OnInit } from '@angular/core';
import { Registration } from '../model/data.model';
import { RegistrationService } from '../service/registration.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-registration',
  // standalone: true,
  // imports: [],
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent implements OnInit {
  registrations: Registration[] = [];
  displayedRegistrations: Registration[] = [];
  searchTerm: string = '';
  newRegistration: Partial<Registration> = { name: '', email: '', phone: '', password: '' };

  constructor(private registrationService: RegistrationService, private router: Router) { }

  ngOnInit() {
    this.loadRegistrations();
  }

  loadRegistrations() {
    this.registrationService.getRegistrations().subscribe({
      next: (data) => {
        this.registrations = data;
        this.displayedRegistrations = data;
      },
      error: (err) => {
        console.error('Error fetching registrations:', err);
      }
    });
  }

  FilteredRegistrations() {
    if (!this.searchTerm.trim()) {
      this.displayedRegistrations = [...this.registrations];
    } else {
      this.displayedRegistrations = this.registrations.filter(registration =>
        registration.id?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        registration.name.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    }
  }

  addRegistration(): void {
    this.router.navigate(["/addregistration"]);
    if (this.newRegistration.name?.trim() && this.newRegistration.email?.trim() && this.newRegistration.phone?.trim() && this.newRegistration.password?.trim()) {
      const registration: Registration = {
        id: '', // ID will be handled by the backend or autogenerated
        name: this.newRegistration.name.trim(),
        email: this.newRegistration.email.trim(),
        phone: this.newRegistration.phone.trim(),
        password: this.newRegistration.password.trim(),
      };

      this.registrationService.createRegistration(registration).subscribe({
        next: (createdRegistration) => {
          console.log('registration created:', createdRegistration);
          this.registrations.push(createdRegistration); // Add to the local course array
          this.FilteredRegistrations(); // Refresh the displayed courses
          this.newRegistration = { name: '', email: '', phone: '', password: '' }; // Reset the form
        },
        error: (err) => {
          console.error('Error creating registration:', err);
        }
      });
    } else {
      console.error('Invalid registration details');
    }
  }

  editRegistration(registration: Registration) {
    console.log('Editing registration:', registration);
    this.router.navigate(['/updateregistration', registration.id]);
    // Implement edit logic
  }

  deleteRegistration(id: string | undefined) {
    if (id) {
      this.registrationService.deleteRegistration(id).subscribe({
        next: () => {
          this.registrations = this.registrations.filter(registration => registration.id !== id);
          this.FilteredRegistrations(); // Refresh displayed courses after deletion
        },
        error: (err) => {
          console.error('Error deleting registration:', err);
        }
      });
    } else {
      console.error('Invalid registration ID');
    }
  }
}
